import '@/styles/globals.css';
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import { CacheProvider, EmotionCache, useTheme } from '@emotion/react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, wrapper } from "../redux/store"
import { asyncAuthentication } from '@/redux/auth/reducer';
import createEmotionCache from './EmotionalCache';
import { LinearProgress, ThemeProvider } from '@mui/material';
import theme from './theme';
import HeaderWrapper from '@/components/header/header';
import Head from 'next/head';
import { ThunkDispatch } from 'redux-thunk';
import { AnyAction } from 'redux';
import { SideBar } from '@/components/sideBar';
import { asyncFetchAllRepairs } from '@/redux/repairs/reducer';
import { asyncFetchAllCars } from '@/redux/cars/reducer';

interface MyAppProps {
  Component: any;
  pageProps: any;
  emotionCache?: EmotionCache;
}

const clientSideEmotionCache = createEmotionCache();

function App({ Component, pageProps, emotionCache = clientSideEmotionCache }: MyAppProps) {
  const dispatch: ThunkDispatch<RootState, undefined, AnyAction> = useDispatch();
  const router = useRouter();
  const user = useSelector((state: RootState) => state.auth.user);
  const state = useSelector((state: RootState) => state);

  useEffect(() => {
    // Check if user is authenticated
    if (!user && !state.auth.loading && !state.auth.isDoneAuthenticated) {
      // Dispatch an action to check authentication status
      dispatch(asyncAuthentication());
    }
  }, [dispatch, user]);

  useEffect(() => {
    if (user && !state.repairs.isDoneLoading) {
      dispatch(asyncFetchAllRepairs(user?.companyId));
    }
    if (user && !state.cars.isDoneLoading) {
      dispatch(asyncFetchAllCars(user?.companyId));
    }
  }, [user])

  useEffect(() => {
    // Redirect to login page if user is not authenticateda
    if (!user && state.auth.isDoneAuthenticated && router.pathname !== '/login') {
      router.push('/login');
    }
  }, [user, router]);

  if (state.auth.loading && !state.auth.isDoneAuthenticated) {
    return (
      <LinearProgress color="primary" />
    )
  }

  if (!state.auth.loading && state.auth.isDoneAuthenticated) {
    return (
      <CacheProvider value={emotionCache}>
        <Head>
          <title>CarAccountant</title>
          <meta name="description" content="Generated by CarAccountant" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link href="https://fonts.googleapis.com/css?family=Montserrat&display=swap" rel="stylesheet"></link>
          <link
            rel="stylesheet"
            type="text/css"
            charSet="UTF-8"
            href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css"
          />
          <link
            rel="stylesheet"
            type="text/css"
            href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css"
          />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <ThemeProvider theme={theme}>
          {user && state.auth.isDoneAuthenticated ? <><HeaderWrapper /><SideBar><Component user={user} {...pageProps} /></SideBar> </> : <Component user={user} {...pageProps} />}
        </ThemeProvider>
      </CacheProvider>
    );
  }
}

export default wrapper.withRedux(App);